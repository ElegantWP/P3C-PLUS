<?xml version="1.0" encoding="UTF-8"?>
<test-data xmlns="http://pmd.sourceforge.net/rule-tests"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests https://pmd.sourceforge.io/rule-tests_1_0_0.xsd">

  <code-fragment id="测试样例">
    <![CDATA[

   package com.yonyou.einvoice.inputtax.service.impl;

import com.yonyou.einvoice.inputtax.api.dto.PrepaymentQueryDto;
import com.yonyou.einvoice.inputtax.api.dto.SubcontractorResponse;
import com.yonyou.einvoice.inputtax.purchase.repository.PurchaseAccountMapper;
import com.yonyou.einvoice.inputtax.realestate.repository.EstateAccountMapper;
import com.yonyou.einvoice.inputtax.reimburse.repository.ReimburseCollectionDao;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class PrepayServiceImpl {

    @Autowired
    private ReimburseCollectionDao reimburseCollectionDao;
    @Autowired
    private PurchaseAccountMapper purchaseAccountMapper;
    @Autowired
    private EstateAccountMapper estateAccountMapper;

    public List<SubcontractorResponse> subcontractorList(PrepaymentQueryDto prepaymentQueryDto) {
        List<SubcontractorResponse> result = new ArrayList<SubcontractorResponse>();
        result.addAll(reimburseCollectionDao.listByProjectid(prepaymentQueryDto));
        result.addAll(purchaseAccountMapper.listByProjectid(prepaymentQueryDto));
        result.addAll(estateAccountMapper.listByProjectid(prepaymentQueryDto));
        List<SubcontractorResponse> sortResult = result.stream()
                .sorted(Comparator
                        .comparing(SubcontractorResponse::getPrepayDeduction, Comparator.nullsFirst(String::compareTo))
                        .reversed())
                .collect(Collectors.toList());// 按扣除状态排序
        for (SubcontractorResponse  response: result) {
            reimburseCollectionDao.updateReimburseCollection();
        }
        return sortResult;
    }

    public void updateAccountState(List<PrepaymentQueryDto> conditions) {
        for (PrepaymentQueryDto condition : conditions) {
            if (CollectionUtils.isNotEmpty(condition.getReimburseIds())) {
                reimburseCollectionDao.updatePrepayDeduction(condition);
            }
            if (CollectionUtils.isNotEmpty(condition.getInvoiceCollectionIds())) {
                purchaseAccountMapper.updatePrepayDeduction(condition);
            }
            if (CollectionUtils.isNotEmpty(condition.getRealEstateIds())) {
                estateAccountMapper.updatePrepayDeduction(condition);
            }
        }

    }

}

        ]]>
  </code-fragment>
  <!--没有对 方法参数签名为空进行判断-->
  <test-code>
    <!-- 预期问题个数 -->
    <description>ServiceLoopCallRule</description>
    <expected-problems>0</expected-problems>
    <code-ref id="测试样例" />
  </test-code>
</test-data>